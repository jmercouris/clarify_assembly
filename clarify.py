#!/usr/bin/env python
import sys

# Pipe in Data
data = sys.stdin.readlines()

# Iterate through Data
for line in data:
    # Strip newline characters
    line = line.rstrip('\n')
    print line

# lines = [line.rstrip('\n') for line in open('filename')]




# instruction_set = {'ABS' : 'Absolute Value',
# 'ACS' : 'Arc Cosine',
# 'ADC' : 'Add with Carry',
# 'ADC' : 'Thumb: Add with Carry',
# 'ADD' : 'Add',
# 'ADD' : 'Thumb: Add',
# 'ADF' : 'Add',
# 'ADR' : 'Get address of object (within 4K)',
# 'ADRL' : 'Get address of object (beyond 4K)',
# 'ALIGN' : 'Set the program counter to the next word boundary',
# 'AND' : 'Logical AND',
# 'AND' : 'Thumb: Logical AND',
# 'ASL' : 'Arithmetic Shift Left',
# 'ASN' : 'Arc Sine',
# 'ASR' : 'Arithmetic Shift Right',
# 'Branch' : '- ',
# 'Branch with Link' : '- ',
# 'Thumb: Long Branch with Link' : 'Thumb ',
# 'Thumb: Branch with Link and Exchange' : 'Thumb ',
# 'Thumb: Branch and Exchange' : 'Thumb ',
# 'Co-processor data operation' : '- ',
# 'CDP, non-conditional so more co-processor commands possible' : 'ARMv5 ',
# 'Count Leading Zeros' : 'ARMv5 ',
# 'Compare floating point value' : 'Floating Point 1 3 ',
# 'Compare negated values' : '- ',
# 'Thumb: Compare negated values' : 'Thumb ',
# 'Compare values' : '- ',
# 'Thumb: Compare values' : 'Thumb ',
# 'Compare negated floating point values' : 'Floating Point 1 ',
# 'Cosine' : 'Floating Point 5 ',
# 'Define byte (B), halfword (W), word (D), string (S), or floating point (F) value.' : 'Some assemblers allow DCFS, DCFD, etc for FP precision.',
# 'DVF' : 'Divide',
# 'EOR' : 'Exclusive-OR two values',
# 'EOR' : 'Thumb: Logical Exclusive-OR',
# 'VFP: Absolute' : 'VFP ',
# 'VFP: Addition' : 'VFP ',
# 'VFP: Compare' : 'VFP ',
# 'VFP: Single to Double' : 'VFP ',
# 'VFP: Double to Single' : 'VFP ',
# 'VFP: Copy [like MVF]' : 'VFP ',
# 'VFP: Division' : 'VFP ',
# 'Fast Divide' : 'Floating Point 1 ',
# 'Convert floating value to an integer' : 'Floating Point 1 3 ',
# 'VFP: Load VFP registers' : 'VFP ',
# 'VFP: Load multiple VFP registers, decr. before' : 'VFP ',
# 'VFP: Load multiple VFP registers, incr. after' : 'VFP ',
# 'Convert integer to a floating value' : 'Floating Point 1 3 ',
# 'VFP: Multiply with Accumulate' : 'VFP ',
# 'VFP: Transfer ARM register to upper half of Double' : 'VFP ',
# 'VFP: Transfer ARM register to lower half of Double' : 'VFP ',
# 'VFP: Transfer upper half of Double to ARM register' : 'VFP ',
# 'VFP: Transfer lower half of Double to ARM register' : 'VFP ',
# 'Fast multiply' : 'Floating Point 1 ',
# 'VFP: Multiply with Negate and Accumulate' : 'VFP ',
# 'VFP: Transfer Single to ARM register' : 'VFP ',
# 'VFP: Transfer ARM register to Single' : 'VFP ',
# 'VFP: Multiply' : 'VFP ',
# 'VFP: Transfer VFP system register to ARM register' : 'VFP ',
# 'VFP: Transfer FPSCR flags to CPSR' : 'VFP ',
# 'VFP: Transfer ARM register to VFP system register' : 'VFP ',
# 'VFP: Copy Negative [like MVN]' : 'VFP ',
# 'VFP: Multiply with Deduct' : 'VFP ',
# 'VFP: Multiply with Negate and Deduct' : 'VFP ',
# 'VFP: Negative Multiply' : 'VFP ',
# 'Fast reverse divide' : 'Floating Point 1 ',
# 'VFP: Signed Integer to Float' : 'VFP ',
# 'VFP: Square Root' : 'VFP ',
# 'VFP: Save VFP registers' : 'VFP ',
# 'VFP: Save multiple VFP registers, decr. before' : 'VFP ',
# 'VFP: Save multiple VFP registers, incr. after' : 'VFP ',
# 'VFP: Subtraction' : 'VFP ',
# 'VFP: Float to Signed Integer' : 'VFP ',
# 'VFP: Float to Unsigned Integer' : 'VFP ',
# 'VFP: Unsigned Integer to Float' : 'VFP ',
# 'Load from memory to co-processor' : '- ',
# 'LDC, non-conditional so more co-processor commands possible' : 'ARMv5 ',
# 'Load floating point value' : 'Floating Point 1 3 ',
# 'Load multiple registers' : '- ',
# 'Thumb: Load multiple registers' : 'Thumb ',
# 'Load register (32 bit)' : '- ',
# 'Thumb: Load register (32 bits?)' : 'Thumb ',
# 'Load byte (8 bit) into register' : '- ',
# 'Thumb: Load byte (8 bit) into register' : 'Thumb ',
# 'Load halfword (16 bit) into register' : 'StrongARM ',
# 'Thumb: Load halfwit (boo!) into register' : 'Thumb ',
# 'Load signed byte (sign + 7 bit) into register' : 'StrongARM ',
# 'Thumb: Load signed byte (sign + 7 bit) into register' : 'Thumb ',
# 'Load signed halfword (sign + 15 bit) into register' : 'StrongARM ',
# 'Thumb: Load signed halfword (sign + 15 bit) into register' : 'Thumb ',
# 'Load multiple floating point values' : 'Floating Point 1 ',
# 'Logarithm to base e' : 'Floating Point 5 ',
# 'Logarithm to base 10' : 'Floating Point 5 ',
# 'Logical Shift Left' : 'This is an option, not an instruction; ',
# 'LSR' : 'Logical Shift Right',
# '' : ' ',
# '' : '- ',
# 'MCR, non-conditional so more co-processor commands possible' : 'ARMv5 ',
# 'MCR, with two registers transferred at one time' : 'ARMv5TE ',
# 'Multiply with Accumulate' : '- ',
# 'Move negated' : 'Floating Point 1 ',
# 'Move value/register into a register' : '- ',
# 'Thumb: Move value/register into a register' : 'Thumb ',
# 'Co-processor register transfer (co-processor to ARM)' : '- ',
# 'MRC, non-conditional so more co-processor commands possible' : 'ARMv5 ',
# 'MRC, with two registers transferred at one time' : 'ARMv5TE ',
# 'Move status flags to a register' : 'ARM 6 ',
# 'Move contents of a register to the status flags' : 'ARM 6 ',
# 'Multiply' : 'Floating Point 1 3 ',
# 'Multiply' : '- ',
# 'Thumb: Multiply' : 'Thumb ',
# 'Move value/float register into a float register' : 'Floating Point 1 3 ',
# 'Move negated' : '- ',
# 'Thumb: Move negated' : 'Thumb ',
# 'Thumb Negate' : 'Thumb ',
# 'Thumb: No Operation' : 'Thumb ',
# 'Normalise' : 'Floating Point 1 ',
# 'Select assembly options' : 'This is an assembler pseudo-instruction ',
# 'Logical OR' : '- ',
# 'Thumb: Logical OR' : 'Thumb ',
# 'PreLoaD' : 'ARMv5 ',
# 'Polar Angle' : 'Floating Point 5 ',
# 'Thumb: Pop registers from stack' : 'Thumb ',
# 'Power' : 'Floating Point 5 ',
# 'Thumb: Push registers onto stack' : 'Thumb ',
# 'Add, saturating' : 'ARMv5E ',
# 'Add, double saturating' : 'ARMv5E ',
# 'Subtract, double saturating' : 'ARMv5E ',
# 'Subtact, saturating' : 'ARMv5E ',
# 'Reverse Divide' : 'Floating Point 1 ',
# 'Read FP control register' : 'Floating Point 1 4 ',
# 'Read FP status register' : 'Floating Point 1 3 ',
# 'Remainder' : 'Floating Point 2 3 ',
# 'Round to integral value' : 'Floating Point 2 3 ',
# 'Rotate Right' : 'This is an option, not an instruction; ',
# 'RPW' : 'Reverse Power',
# 'RRX' : 'Rotate Right with extend',
# 'RSB' : 'Reverse Subtract',
# 'RSC' : 'Reverse Subtract with Carry',
# 'RSF' : 'Reverse Subtract',
# 'SBC' : 'Subtract with Carry',
# 'SBC' : 'Thumb: Subtract with Carry',
# 'SFM' : 'Store Muliple Floating point values',
# 'SIN' : 'Sine',
# 'SMLA' : 'Signed Multiply with Accumulate of 16 bit * 16 bit values',
# 'SMLAL' : 'Signed Long (sign + 63 bit) Multiply with Accumulate',
# 'SMLAL' : 'Signed Multiply with Accumulate of 16 bit * 16 bit values,',
# 'SMLAW' : 'Signed Multiply with Accumulate of 32 bit * 16 bit values',
# 'SMUL' : 'Signed Multiply of 16 bit * 16 bit values',
# 'SMULL' : 'Signed Long (sign + 63 bit) Multiply',
# 'SMULW' : 'Signed Multiply of 32 bit * 16 bit values',
# 'SQT' : 'Square Root',
# 'STC' : 'Co-processor data transfer',
# 'STC2' : 'STC, non-conditional so more co-processor commands possible',
# 'STF' : 'Store floating point value',
# 'STM' : 'Store multiple registers',
# 'STMIA' : 'Thumb: Store multiple registers',
# 'STR' : 'Store a register (32 bit)',
# 'STR' : 'Thumb: Store register (32 bit?)',
# 'STRB' : 'Store a byte (8 bit) from a register',
# 'STRB' : 'Thumb: Store byte (8 bit)',
# 'STRH' : 'Store a halfword (16 bit) from a register',
# 'STRH' : 'Thumb: Store halfword (16 bit)',
# 'STRSB' : 'Store a signed byte (sign + 7 bit) from a register',
# 'STRSH' : 'Store a signed half-word (sign + 15 bit) from a register',
# 'SUB' : 'Subtract',
# 'SUB' : 'Thumb: Subtract',
# 'SUF' : 'Subtract',
# 'SWI' : 'Cause a SoftWare Interrupt',
# 'SWI' : 'Thumb: SoftWare Interrupt',
# 'SWP' : 'Swap register with memory',
# 'TAN' : 'Tangent',
# 'TEQ' : 'Test Equivalence (notional EOR)',
# 'TST' : 'Test bits (notional AND)',
# 'TST' : 'Thumb: Test bits',
# 'UMLAL' : 'Unsigned Long (64 bit) Multiply with Accumulate',
# 'UMULL' : 'Unsigned Long (64 bit) Multiply',
# 'URD' : 'Unnormalised round',
# 'WFC' : 'Write FP control register',
# 'WFS' : 'Write FP status register' }


